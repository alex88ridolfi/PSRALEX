#!/usr/bin/env python3

#################### ALESSANDRO RIDOLFI ########################
#                        Version 1.0                           #
#                    Cagliari,  Aug 2023                       #
################################################################



import sys, os, os.path, subprocess, glob
import numpy as np
from astropy.time import Time

from presto import filterbank, infodata, psrfits

def get_command_output(command):
        list_for_Popen = command.split()
        proc = subprocess.Popen(list_for_Popen, stdout=subprocess.PIPE)
        out, err = proc.communicate()
        return out.decode(sys.stdout.encoding)

def get_command_output_with_pipe(command1, command2):
        list_for_Popen_cmd1 = command1.split()
        list_for_Popen_cmd2 = command2.split()
        #print(list_for_Popen_cmd1, list_for_Popen_cmd2)
        p1 = subprocess.Popen(list_for_Popen_cmd1, stdout=subprocess.PIPE)
        p2 = subprocess.Popen(list_for_Popen_cmd2, stdin=p1.stdout, stdout=subprocess.PIPE)
        p1.stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.

        out, err = p2.communicate()
        #print( out.decode(sys.stdout.encoding).strip().split("\n"))
        return out.decode(sys.stdout.encoding)


def format_field(field, value):
#        print("format_field: ", value)
        if field == "file_abspath":
                str_value = "%-40s" % value.strip()
        elif field == "file_name":
                str_value = "%-40s" % value.strip()
        elif field == "file_basename":
                str_value = "%-40s" % value.strip()
        elif field == "data_format":
                str_value = "%-10s" % value.strip()
        elif field == "telescope":
                str_value = "%-12s" % value.strip()
        elif field == "observer":
                str_value = "%-30s" % value.strip()
        elif field == "central_freq":
                str_value = "%-15.2f" % value
        elif field == "freq_high":
                str_value = "%-15.2f" % value
        elif field == "freq_low":
                str_value = "%-15.2f" % value
        elif field == "nbits":
                str_value = "%-5d" % value
        elif field == "chan_bw":
                str_value = "%-15.2f" % value
        elif field == "total_bw":
                str_value = "%-15.2f" % value
        elif field == "backend":
                str_value = "%10s" % value.strip()
        elif field == "ra":
                str_value = "%-20s" % value
        elif field == "dec":
                str_value = "%-20s" % value.strip()
        elif field == "source_name":
                str_value = "%-20s" % value.strip()
        elif field == "start_mjd":
                str_value = "%-20.3f" % value
        elif field == "start_date_time":
                str_value = "%-20s" % value.strip()
        elif field == "start_date":
                str_value = "%-20s" % value.strip()
        elif field == "start_time":
                str_value = "%-20s" % value.strip()
        elif field == "obs_length_s":
                str_value = "%15d" % value
        elif field == "obs_length_min":
                str_value = "%12d" % value
        elif field == "obs_length_h":
                str_value = "%8d" % value
        elif field == "nchan":
                str_value = "%-10d" % value
        elif field == "dm":
                str_value = "%-15.3f" % value
        elif field == "n_samples":
                str_value = "%-12d" % value
        elif field == "t_samp_us":
                str_value = "%-15.3f" % value
                
        return str_value


class Inffile(object):
        def __init__(self, inffilename):
                inffile = open(inffilename, "r")
                self.file_name = inffilename
                self.data_format = "PRESTO timeseries"
                for line in inffile:
                        if "Data file name without suffix" in line:
                                self.file_basename = line.split("=")[-1].strip()
                        elif "Telescope used" in line:
                                self.telescope = line.split("=")[-1].strip()
                        elif "Instrument used" in line:
                                self.backend = line.split("=")[-1].strip()
                        elif "Object being observed" in line:
                                self.source_name = line.split("=")[-1].strip()
                        elif "J2000 Right Ascension" in line:
                                self.RA = line.split("=")[-1].strip()
                        elif "J2000 Declination" in line:
                                self.DEC = line.split("=")[-1].strip()
                        elif "Data observed by" in line:
                                self.observer = line.split("=")[-1].strip()
                        elif "Epoch of observation" in line:
                                self.start_mjd = np.float128(line.split("=")[-1].strip())
                        elif "Barycentered?" in line:
                                self.barycentered = int(line.split("=")[-1].strip())
                        elif "Number of bins in the time series" in line:
                                self.n_samples = int(line.split("=")[-1].strip())
                        elif "Width of each time series bin" in line:
                                self.tsamp_s = np.float128(line.split("=")[-1].strip())
                                self.tsamp_us = self.tsamp_s *1.0e6
                        elif "Any breaks in the data?" in line:
                                self.breaks_in_data = int(line.split("=")[-1].strip())
                        elif "Type of observation" in line:
                                self.obstype = line.split("=")[-1].strip()
                        elif "Beam diameter" in line:
                                self.beamdiameter = np.float128(line.split("=")[-1].strip())
                        elif "Dispersion measure" in line:
                                self.dm = np.float128(line.split("=")[-1].strip())
                        elif "Central freq of low channel" in line:
                                self.freq_ch1 = np.float128(line.split("=")[-1].strip())
                        elif "Total bandwidth" in line:
                                self.total_bw = np.float128(line.split("=")[-1].strip())
                        elif "Number of channels" in line:
                                self.nchan = int(line.split("=")[-1].strip())
                        elif "Channel bandwidth" in line:
                                self.bw_chan = np.float128(line.split("=")[-1].strip())
                        elif "Data analyzed by" in line:
                                self.analyzer = line.split("=")[-1].strip()

                        self.obs_length_s   = self.tsamp_s * self.self.n_samples
                        self.obs_length_min = self.obs_length_s / 60.
                        self.obs_length_h   = self.obs_length_s / 3600.

                        
                inffile.close()
                

class Observation(object):
        def __init__(self, file_name, data_type="psrfits", verbosity_level=1):
                self.file_abspath = os.path.abspath(file_name)
                self.file_name = self.file_abspath.split("/")[-1]
                self.file_basename, self.file_extension = os.path.splitext(self.file_name)

                
                if data_type =="filterbank":
                        self.data_format = "filterbank"
                        dict_telescopes_to_ids = {'SRT': 10, 'Arecibo': 1, 'Nancay': 3, 'Parkes': 4, 'Jodrell': 5, 'GBT': 6, 'Effelsberg': 8, 'GMRT': 'r',  'MeerKAT': 64}
                        dict_ids_to_telescopes = {"10": 'SRT', "1": 'Arecibo', "3": 'Nancay', "4": 'Parkes', "5": 'Jodrell', "6": 'GBT', "8": 'Effelsberg', "r": 'GMRT', "64": 'MeerKAT'}
                        try:
                                
                                object_file = filterbank.FilterbankFile(self.file_abspath)

                                self.n_samples = object_file.nspec
                                self.t_samp_s = object_file.dt
                                self.t_samp_us = self.t_samp_s *1.0e6
                                self.obs_length_s = self.n_samples * self.t_samp_s
                                self.nbits = object_file.header['nbits']
                                self.nchan = object_file.nchan
                                self.chan_bw = object_file.header['foff']
                                self.total_bw = self.nchan * self.chan_bw
                                self.central_freq = object_file.header['fch1'] + object_file.header['foff']*0.5*object_file.nchan
                                self.freq_high = np.amax(object_file.freqs)
                                self.freq_low = np.amin(object_file.freqs)
                                self.MJD_int = int(object_file.header['tstart'])
                                self.start_mjd = object_file.header['tstart']
                                self.telescope_id = str(object_file.header['telescope_id'])
                                self.telescope = dict_ids_to_telescopes[self.telescope_id].strip()
                                self.source_name = object_file.header['source_name'].strip()

                                if len(str(object_file.header['src_raj'])) == 9:
                                        self.ra   = str(object_file.header['src_raj'])[:2] + ":" + str(object_file.header['src_raj'])[2:4] + ":" + str(object_file.header['src_raj'])[4:]
                                elif len(str(object_file.header['src_raj'])) == 8:
                                        self.ra   = "0"+ str(object_file.header['src_raj'])[:1] + ":" + str(object_file.header['src_raj'])[1:3] + ":" + str(object_file.header['src_raj'])[3:]
                                elif len(str(object_file.header['src_raj'])) == 7:
                                        self.ra   = "00"+ ":" + str(object_file.header['src_raj'])[:2] + ":" + str(object_file.header['src_raj'])[2:]
                                        
                                self.dec  = str(object_file.header['src_dej'])[:3] + ":" + str(object_file.header['src_dej'])[3:5] + ":" + str(object_file.header['src_dej'])[5:] 




                                
                        except ValueError:
                                if verbosity_level >= 2:
                                        print("WARNING: I got a Value Error! Likely your filterbank data is not 8-,16- or 32-bit. Using 'header' to get the necessary information...")

                                try:        self.n_samples        = np.float64(get_command_output_with_pipe("readfile %s" % (file_name), "grep Spectra").split("=")[-1])
                                except:     self.n_samples        = np.abs(int(get_command_output("header %s -nsamples" % (self.file_abspath)).split()[-1]  ))

                                try:        self.t_samp_s         = np.float64(get_command_output_with_pipe("readfile %s" % (file_name), "grep Sample ").split("=")[-1])* 1.0e-6
                                except:     self.t_samp_s         = np.float64(      get_command_output("header %s -tsamp"    % (self.file_abspath)).split()[-1]) * 1.0e-6

                                try:        self.obs_length_s     = np.float64(get_command_output_with_pipe("readfile %s" % (file_name), "grep Time ").strip().split("\n")[-1].split("=")[-1])
                                except:     self.obs_length_s     = np.float64(get_command_output("header %s -tobs"     % (self.file_abspath)).split()[-1])
                                
                                try:        self.nbits            =  np.float64(get_command_output_with_pipe("readfile %s" % (file_name), "grep bits").split("=")[-1])
                                except:     self.nbits            = int(get_command_output("header %s -nbits"    % (self.file_abspath)).split()[-1])
 
                                try:        self.nchan            = int(get_command_output_with_pipe("readfile %s" % (file_name), "grep channels").split("=")[-1])
                                except:     self.nchan            = int(get_command_output("header %s -nchans"   % (self.file_abspath)).split()[-1])
                                                                        
                                try:        self.chan_bw          = np.float64(get_command_output_with_pipe("readfile %s" % (file_name), "grep  Channel ").split("=")[-1])
                                except:     self.chan_bw          = np.fabs(np.float64(get_command_output("header %s -foff"     % (self.file_abspath)).split()[-1]))
                                                                        
                                try:        self.total_bw         = np.float64(get_command_output_with_pipe("readfile %s" % (file_name), "grep Total ").split("=")[-1])
                                except:     self.total_bw         = self.chan_bw*self.nchan
                                                                        
                                try:        self.start_mjd        = np.float64(get_command_output_with_pipe("readfile %s" % (file_name), "grep start ").split("=")[-1])
                                except:     self.start_mjd        = np.float64(get_command_output("header %s -tstart"   % (self.file_abspath)).split()[-1])
                                                                        
                                try:        self.central_freq     = np.float64(get_command_output_with_pipe("readfile %s" % (file_name), "grep Central ").split("=")[-1])
                                except:     self.central_freq     = self.freq_high - 0.5*self.total_bw
                                
                                try:        self.freq_high        = np.float64(get_command_output_with_pipe("readfile %s" % (file_name), "grep High ").split("=")[-1])
                                except:     self.freq_high        = np.float64(get_command_output("header %s -fch1"     % (self.file_abspath)).split()[-1]) + 0.5*self.chan_bw

                                try:        self.freq_low         = np.float64(get_command_output_with_pipe("readfile %s" % (file_name), "grep Low ").split("=")[-1])
                                except:     self.freq_low         = self.freq_high - self.total_bw
                                                                   
                                try:        self.source_name      = get_command_output_with_pipe("readfile %s" % (file_name), "grep Source ").split("=")[-1]
                                except:     self.source_name      = get_command_output("header %s -source_name"     % (self.file_abspath)).strip()
                                                                   
                                try:        self.telescope        = get_command_output_with_pipe("readfile %s" % (file_name), "grep  Telescope ").split("=")[-1]
                                except:     self.telescope        = get_command_output("header %s -telescope"     % (self.file_abspath)).strip()

                                try:        self.backend          = get_command_output("header %s -machine" % (self.file_abspath)).split()[-1].strip()
                                except:     self.backend          = "N/A"

                                try:        self.ra               = get_command_output_with_pipe("readfile %s" % (file_name), "grep RA  ").strip().split("\n")[0].split("=")[-1]
                                except:     self.ra               = "N/A"

                                try:        self.dec              = get_command_output_with_pipe("readfile %s" % (file_name), "grep Dec ").strip().split("\n")[0].split("=")[-1]
                                except:     self.dec              = "N/A"

                                
                                
                                
                        if verbosity_level >= 2:
                                print(self.n_samples, self.t_samp_s, self.obs_length_s, self.nbits, self.nchan, self.chan_bw, self.total_bw, self.start_mjd, self.freq_high, self.central_freq, self.freq_low)

                if data_type =="scamp":                        
                                try:        self.n_samples        = np.abs(int(get_command_output("header %s -nsamples" % (self.file_abspath)).split()[-1]  ))
                                except:     self.n_samples        = "N/A"

                                try:        self.t_samp_s         = np.float64(      get_command_output("header %s -tsamp"    % (self.file_abspath)).split()[-1]) * 1.0e-6
                                except:     self.t_samp_s         = "N/A"

                                try:        self.obs_length_s     = np.float64(get_command_output("header %s -tobs"     % (self.file_abspath)).split()[-1])
                                except:     self.obs_length_s     = "N/A"

                                try:        self.nbits            = int(get_command_output("header %s -nbits"    % (self.file_abspath)).split()[-1])
                                except:     self.nbits            = "N/A"

                                try:        self.nchan            = int(get_command_output("header %s -nchans"   % (self.file_abspath)).split()[-1])
                                except:     self.nchan            = "N/A"

                                try:        self.chan_bw          = np.fabs(np.float64(get_command_output("header %s -foff"     % (self.file_abspath)).split()[-1]))
                                except:     self.chan_bw          = "N/A"

                                try:        self.total_bw         = self.chan_bw*self.nchan
                                except:     self.total_bw         = "N/A"

                                try:        self.start_mjd        = np.float64(get_command_output("header %s -tstart"   % (self.file_abspath)).split()[-1])
                                except:     self.start_mjd        = "N/A"

                                try:        self.freq_high        = np.float64(get_command_output("header %s -fch1"     % (self.file_abspath)).split()[-1]) + 0.5*self.chan_bw
                                except:     self.freq_high        = "N/A"

                                try:        self.freq_low         = self.freq_high - self.total_bw
                                except:     self.freq_low         = "N/A"

                                try:        self.central_freq     = self.freq_high - 0.5*self.total_bw
                                except:     self.central_freq     = "N/A"
                                
                                try:        self.source_name      = get_command_output("header %s -source_name"     % (self.file_abspath)).strip()
                                except:     self.source_name      = "N/A"

                                try:        self.telescope        = get_command_output("header %s -telescope"     % (self.file_abspath)).strip()
                                except:     self.telescope        = "N/A"

                                try:        self.backend          = get_command_output("header %s -machine" % (self.file_abspath)).split()[-1].strip()
                                except:     self.backend          = "N/A"

                                try:        self.ra               = get_command_output_with_pipe("readfile %s" % (file_name), "grep RA  ").strip().split("\n")[0].split("=")[-1]
                                except:     self.ra               = "N/A"

                                try:        self.dec              = get_command_output_with_pipe("readfile %s" % (file_name), "grep Dec ").strip().split("\n")[0].split("=")[-1]
                                except:     self.dec              = "N/A"


                        

                if data_type =="psrfits":
                        self.data_format = "PSRFITS"
                        if verbosity_level >= 2:
                                print("Reading PSRFITS....")
                        if psrfits.is_PSRFITS(file_name) == True:
                                if verbosity_level >= 2:
                                        print("File '%s' correctly recognized as PSRFITS" % (file_name))
                                object_file = psrfits.PsrfitsFile(self.file_abspath)
                                self.total_bw = object_file.specinfo.BW
                                self.n_samples = object_file.specinfo.N
                                self.obs_length_s = object_file.specinfo.T
                                self.backend = object_file.specinfo.backend
                                self.nbits = object_file.specinfo.bits_per_sample
                                self.date_obs = object_file.specinfo.date_obs
                                self.dec_deg = object_file.specinfo.dec2000
                                self.dec = object_file.specinfo.dec_str
                                self.chan_bw = object_file.specinfo.df
                                self.t_samp_s = object_file.specinfo.dt
                                self.central_freq = object_file.specinfo.fctr
                                self.receiver = object_file.specinfo.frontend
                                self.freq_high = object_file.specinfo.hi_freq
                                self.freq_low = object_file.specinfo.lo_freq
                                self.MJD_int = object_file.specinfo.mjd
                                self.MJD_sec = object_file.specinfo.secs
                                self.start_mjd = self.MJD_int + np.float64(self.MJD_sec/86400.)
                                self.nchan = object_file.specinfo.num_channels
                                self.observer = object_file.specinfo.observer
                                self.project = object_file.specinfo.project_id
                                self.ra_deg = object_file.specinfo.ra2000
                                self.ra = object_file.specinfo.ra_str
                                self.seconds_of_day = object_file.specinfo.secs
                                self.source_name = object_file.specinfo.source
                                self.telescope = object_file.specinfo.telescope

                        else:
                                print("Reading PSRFITS (header only)....")
                                self.total_bw = np.float64(get_command_output("vap -n -c bw %s" % (file_name)).split()[-1])
                                self.n_samples = np.float64(get_command_output_with_pipe("readfile %s" % (file_name), "grep Spectra").split("=")[-1])
                                self.obs_length_s = np.float64(get_command_output("vap -n -c length %s" % (file_name)).split()[-1])
                                self.backend = get_command_output("vap -n -c backend %s" % (file_name)).split()[-1]
                                self.nbits = int(get_command_output_with_pipe("readfile %s" % (file_name), "grep bits").split("=")[-1])
                                self.chan_bw = np.float64(get_command_output_with_pipe("readfile %s" % (file_name), "grep Channel").split("=")[-1])
                                self.t_samp_s = np.float64(get_command_output("vap -n -c tsamp %s" % (file_name)).split()[-1])
                                self.central_freq = np.float64(get_command_output("vap -n -c freq %s" % (file_name)).split()[-1])
                                self.receiver = get_command_output("vap -n -c rcvr %s" % (file_name)).split()[-1]
                                self.freq_high = np.float64(get_command_output_with_pipe("readfile %s" % (file_name), "grep High").split("=")[-1])
                                self.freq_low = np.float64(get_command_output_with_pipe("readfile %s" % (file_name), "grep Low").split("=")[-1])
                                self.nchan = int(get_command_output("vap -n -c nchan %s" % (file_name)).split()[-1])
                                self.MJD_int = int(get_command_output("psrstat -Q -c ext:stt_imjd %s" % (file_name)).split()[-1])
                                self.MJD_sec_int = int(get_command_output("psrstat -Q -c ext:stt_smjd %s" % (file_name)).split()[-1])
                                self.MJD_sec_frac = np.float64(get_command_output("psrstat -Q -c ext:stt_offs %s" % (file_name)).split()[-1])
                                self.MJD_sec = self.MJD_sec_int + self.MJD_sec_frac
                                self.start_mjd   = self.MJD_int + np.float64(self.MJD_sec/86400.)
                                

                try:      self.obs_length_min   = self.obs_length_s / 60.
                except:   self.obs_length_min   = "N/A"
                        
                try:      self.obs_length_h     = self.obs_length_s / 3600.
                except:   self.obs_length_h     = "N/A"

                try:      self.t_samp_us        = self.t_samp_s * 1.0e6
                except:   self.t_samp_us        = "N/A"

                try:      self.start_date       = Time(self.start_mjd, format='mjd').to_datetime().strftime("%Y-%m-%d %H:%M")
                except:   self.start_date       = "N/A"

string_version="0.1 (25Aug2023)"
verbosity_level=1

if (len(sys.argv) == 1 or ("-h" in sys.argv) or ("-help" in sys.argv) or ("--help" in sys.argv)):
        print("USAGE: %s -obs \"<observation_files*.fits/fil/inf>\" -fields \"field1,field2,...,fieldN\" " % (os.path.basename(sys.argv[0])))
        print()
        print("%10s  %-40s:  %-50s" % ("-h", "", "Print help"))
        print("%10s  %-40s:  %-50s" % ("-obs", "\"<observation_files*.fil/fits/inf>\"", "Data files"))
        print("%10s  %-40s:  %-50s" % ("-fields", "\"field1,field2,...,fieldN\"", "Fields to tabulate for each observation"))
        print("%10s  %-40s:  %-50s" % ("-version", "", "Print code version"))
        print()
        print("Available fields:\nfile_abspath | file_name | file_basename | data_format | telescope | observer | central_freq | freq_high | freq_low | nbits | chan_bw | total_bw | backend | ra | dec | source_name | start_mjd | start_date_time | start_date | start_time | obs_length_s | obs_length_min | obs_length_h | nchan | dm | n_samples | t_samp_us")
        print()
        print("For more details on the available fields: \033[1m%s -show_fields_details \033[0m" % (os.path.basename(sys.argv[0])))
        print()
        exit()
elif (("-version" in sys.argv) or ("--version" in sys.argv)):
        print("%s version: %s" % (os.path.basename(sys.argv[0]), string_version))
        exit()
else:
        for j in range(1, len(sys.argv)):
                if (sys.argv[j] == "-obs"):
                        string_files = sys.argv[j+1]
                        if ("*" in string_files) or ("?" in string_files):
                                list_files = sorted(glob.glob(string_files))
                        else:
                                list_files = string_files.split(",")


                if (sys.argv[j] == "-fields"):
                        list_fields = sys.argv[j+1].split(",")

                        
                elif (sys.argv[j] == "-show_fields_details"):
                        print()
                        print("LIST OF AVAILABLE FIELDS AND THEIR MEANING:")
                        print()
                        print("%-18s: %s " % ("file_abspath",      "Full path to the observation file , including extension"))
                        print("%-18s: %s " % ("file_name",         "File name of the observation, including extension"))
                        print("%-18s: %s " % ("file_basename",     "File name of the observation, without extension"))
                        print("%-18s: %s " % ("data_format",       "File format (filterbank/PSRFITS/time series)"))
                        print("%-18s: %s " % ("telescope",         "Telescope name"))
                        print("%-18s: %s " % ("observer",          "Observer name"))
                        print("%-18s: %s " % ("central_freq",      "Central frequency of observing band (MHz)"))
                        print("%-18s: %s " % ("freq_high",         "Frequency of upper edge of observing band (MHz)"))
                        print("%-18s: %s " % ("freq_low",          "Frequency of lower edge of observing band (MHz)"))
                        print("%-18s: %s " % ("nbits",             "Number of bits used for each data sample"))
                        print("%-18s: %s " % ("chan_bw",           "Width of each frequency channel (MHz)"))
                        print("%-18s: %s " % ("total_bw",          "Total observing bandwidth (MHz)"))
                        print("%-18s: %s " % ("backend",           "Backend name"))
                        print("%-18s: %s " % ("ra",                "Right Ascension of pointing (J2000)"))
                        print("%-18s: %s " % ("dec",               "Declination of pointing (J2000)"))
                        print("%-18s: %s " % ("source_name",       "Source name"))
                        print("%-18s: %s " % ("start_mjd",         "MJD, with decimal, "))
                        print("%-18s: %s " % ("start_date_time",   "Start date and time (YYYY-MM-DD_HH:MM UTC)"))
                        print("%-18s: %s " % ("start_date",        "Start date (YYYY-MM-DD)"))
                        print("%-18s: %s " % ("start_time",        "Start time  (HH:MM UTC)"))
                        print("%-18s: %s " % ("obs_length_s",      "Length of the observation (seconds)"))
                        print("%-18s: %s " % ("obs_length_min",    "Length of the observation (minutes)"))
                        print("%-18s: %s " % ("obs_length_h",      "Length of the observation (hours)"))
                        print("%-18s: %s " % ("nchan",             "Number of frequency channels"))
                        print("%-18s: %s " % ("dm",                "Dispersion Measure used for Coherent/Incoherent Dedispersion (pc cm-3)"))
                        print("%-18s: %s " % ("n_samples",         "Number of time samples in the data"))
                        print("%-18s: %s " % ("t_samp_us",         "Sampling time size (microseconds)"))
                        exit()

                if (sys.argv[j] == "-V"):
                        verbosity_level = 2

                        
N_files  = len(list_files)
N_fields = len(list_fields)


for i in range(N_files):
        rawfilename = list_files[i]
        string_obs_info = ""
        
        if rawfilename.endswith(".fil"):
                rawfile = Observation(rawfilename, data_type="filterbank", verbosity_level=verbosity_level)
        elif rawfilename.endswith(".fits") or rawfilename.endswith(".sf"):
                rawfile = Observation(rawfilename, data_type="psrfits", verbosity_level=verbosity_level)
        elif rawfilename.endswith(".afb"):
                rawfile = Observation(rawfilename, data_type="scamp", verbosity_level=verbosity_level)

        string_obs_info = ""
        for k in range(N_fields):
                field = list_fields[k]
                try:
                        string_value_formatted = format_field(field,  (getattr(rawfile, field)))
                        
                except Exception as error:                        
                        string_value_formatted = "N/A"
                        
                        if verbosity_level >= 2:
                                print("TRY ERROR: %s" % (error))
                        
                string_obs_info = string_obs_info + "%s\t" % string_value_formatted

        print(string_obs_info)


print()
print("---")
print("Note: if you want to make a LaTeX version of this table, go to https://www.tablesgenerator.com/ and paste it there.")
