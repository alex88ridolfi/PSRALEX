#!/usr/bin/env python3

import sys
import numpy as np

G            = 6.67259e-8           # cm^3 /g s^2
LIGHT_SPEED  = 2.99792458e10        # cm/s
M_SUN_CGS    = 1.989e33             # g

def calculate_accelsearch_zmax(P, Pb, Mp, Mc, T):
        """
        All units in CGS!!
        """

        a = np.power( G*(Mp + Mc)*np.power(Pb, 2)/ (4 * np.power(np.pi, 2)) , 1/3.) # III Kepler's equation
        a_p = ( Mc /(Mp + Mc) ) * a

        accel = np.power(2*np.pi/Pb, 2) * a_p

        print("accel = %.2f cm/s^2 = %.2f m/s^2" % (accel, accel/100.))

        z_max = (1./LIGHT_SPEED)  * (np.power(T, 2) / P) * accel
        return z_max


#ARGOMENTI DA SHELL
if (len(sys.argv) == 1):
    print("Usage: alex_zmax -P [s] -Pb [d] -Mp [Msun] -Mc [Msun] -T [s]")
    print()
    exit()
else:
    for n in range(1, len(sys.argv)-1):
        if (sys.argv[n] == "-P"):
            P = np.float64(sys.argv[n+1])
        elif (sys.argv[n] == "-Pb"):
            Pb = np.float64(sys.argv[n+1]) * 86400  #convert from days to seconds
        elif (sys.argv[n] == "-Mp"):
            Mp = np.float64(sys.argv[n+1]) * M_SUN_CGS
        elif (sys.argv[n] == "-Mc"):
            Mc = np.float64(sys.argv[n+1]) * M_SUN_CGS
        elif (sys.argv[n] == "-T"):
            T = np.float64(sys.argv[n+1])
       


print("    P = %.6f s = %.3f ms" % (P, P*1.0e3))
print("   Pb = %.5f s = %.3f h = %.4f d" % (Pb, Pb/3600., Pb/86400.))
print("   Mp = %.5f Msun" % (Mp/M_SUN_CGS))
print("   Mc = %.5f Msun" % (Mc/M_SUN_CGS))
print(" Tobs = %.2f s = %.3f h" % (T, T/3600.))


z_max = calculate_accelsearch_zmax(P, Pb, Mp, Mc, T)
print() 
print("-> z_max = %d  (For the fundamental harmonic. Multiply by n for the n-th harmonic)" % (int(z_max) + 1 ))
